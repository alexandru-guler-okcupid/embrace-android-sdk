package io.embrace.android.embracesdk.internal.spans

import io.embrace.android.embracesdk.arch.schema.EmbType
import io.embrace.android.embracesdk.arch.schema.EmbraceAttribute
import io.embrace.android.embracesdk.arch.schema.KeySpan
import io.embrace.android.embracesdk.arch.schema.PrivateSpan
import io.embrace.android.embracesdk.arch.schema.TelemetryType
import io.embrace.android.embracesdk.spans.EmbraceSpan
import io.opentelemetry.api.trace.Span
import io.opentelemetry.api.trace.SpanBuilder
import io.opentelemetry.context.Context
import java.util.concurrent.TimeUnit

internal class EmbraceSpanBuilder(
    private val otelSpanBuilder: SpanBuilder,
    telemetryType: TelemetryType,
    parent: EmbraceSpan?
) {
    val embraceAttributes = mutableListOf<EmbraceAttribute>(telemetryType)

    /**
     * Extract the parent span from an [EmbraceSpan] and set it as the parent
     */
    init {
        if (parent == null) {
            otelSpanBuilder.setNoParent()
            if (telemetryType == EmbType.Performance.Default) {
                makeKey()
            }
        } else if (parent is EmbraceSpanImpl) {
            parent.wrappedSpan()?.let {
                otelSpanBuilder.setParent(Context.current().with(it))
            }
        }
    }

    fun startSpan(startTimeMs: Long): Span {
        val startedSpan = otelSpanBuilder.setStartTimestamp(startTimeMs, TimeUnit.MILLISECONDS).startSpan()
        embraceAttributes.forEach { embraceAttribute ->
            startedSpan.setEmbraceAttribute(embraceAttribute)
        }
        return startedSpan
    }

    /**
     * Mark the span generated by this builder as [PrivateSpan]
     */
    fun makePrivate(): EmbraceSpanBuilder {
        setEmbraceAttribute(PrivateSpan)
        return this
    }

    /**
     * Mark the span generated by this builder as a [KeySpan]
     */
    private fun makeKey(): EmbraceSpanBuilder {
        setEmbraceAttribute(KeySpan)
        return this
    }

    /**
     * Sets an [EmbraceAttribute] on the given [SpanBuilder] and return it
     */
    private fun setEmbraceAttribute(embraceAttribute: EmbraceAttribute): EmbraceSpanBuilder {
        embraceAttributes.add(embraceAttribute)
        return this
    }
}
